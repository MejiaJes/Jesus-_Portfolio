<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/jesusmejia/Downloads/Guided Project_ Answering Business Questions using SQL/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="5853"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,5:mainalbum"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="Dataquest_project1.sql">--Question 1: Which Products Should We order More of or Less of?--
--Write a query to compute the low stock for each product using a correlated subquery.--
In SQLite, REAL is the datatype for FLOAT.
WITH low AS(SELECT o.productCode, ROUND(SUM(CAST(quantityOrdered AS REAL))/quantityInStock,2) as lowstock
FROM orderdetails o
JOIN products 
ON o.productCode = p.productCode
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10)

SELECT l.productCode, sum(quantityOrdered*priceEach) as productperf
FROM orderdetails o
JOIN low l
on o.productCode = l.productCode
group by 1
order by 2 DESC
limit 10;
--Question 2: How Should We Match Marketing and Communication Strategies to Customer Behavior?
--2a.Before we begin, let's compute how much profit each customer generates.
select customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
from orderdetails od
join products p
on od.productCode = p.productCode
join orders o
ON od.orderNumber = o.orderNumber
GROUP BY customerNumber;
--Question 3:Finding the VIP and Less Engaged Customers
--3a.Write a query to find the top five VIP customers.
SELECT customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
from orderdetails od
join products p
on od.productCode = p.productCode
join orders o
ON od.orderNumber = o.orderNumber
GROUP BY customerNumber
ORDER BY 	profit DESC
LIMIT 5
--3b.Similar to the previous query, write a query to find the top five least-engaged customers.
-- Use the query from the previous screen as a CTE.
-- Select the following columns: contactLastName, contactFirstName, city, and country from the customers table and the profit from the CTE.
SELECT customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
from orderdetails od
join products p
on od.productCode = p.productCode
join orders o
ON od.orderNumber = o.orderNumber
GROUP BY customerNumber
ORDER BY 	profit 
LIMIT 5

--4.Write a query to find the top five VIP customers.
--Use the query from the previous screen as a CTE.
--Select the following columns: contactLastName, contactFirstName, city, and country from the customers table and the profit from the CTE.
WITH target_customers AS (SELECT customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
from orderdetails od
join products p
on od.productCode = p.productCode
join orders o
ON od.orderNumber = o.orderNumber
GROUP BY customerNumber)

SELECT contactLastName, contactFirstName, city, country, profit
FROM target_customers t
JOIN customers c
ON t.customerNumber = c.customerNumber
ORDER BY profit DESC
LIMIT 5;

SELECT contactLastName, contactFirstName, city, country, profit
FROM target_customers t
JOIN customers c
ON t.customerNumber = c.customerNumber
ORDER BY profit
LIMIT 5
--5. compute the average of customer profits using the CTE on the previous screen.
WITH target_customers AS (SELECT customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
from orderdetails od
join products p
on od.productCode = p.productCode
join orders o
ON od.orderNumber = o.orderNumber
GROUP BY customerNumber)

SELECT ROUND(avg(profit) ,2) AS  Customer_LTV
FROM target_customers</sql><sql name="SQL 2">--Extracted year and month from 'paymentDate' column.
--Substringed year and multiplied by 100 to add two digits to the end which allowed for the addition of the months.
--Converted query in a CTE.
WITH payment_with_year_month_table AS (
SELECT *, 
       CAST(SUBSTR(paymentDate, 1,4) AS INTEGER)*100 + CAST(SUBSTR(paymentDate, 6,7) AS INTEGER) AS year_month
  FROM payments p
),
--Group by customized column.

customers_by_month_table AS(SELECT 
	p1.year_month, 
	COUNT(*) AS number_of_customers, 
	SUM(p1.amount) AS total
  FROM payment_with_year_month_table p1
 GROUP BY p1.year_month),
 
 new_customers_by_month_table AS (SELECT p1.year_month, 
       COUNT(*) AS number_of_new_customers,
       SUM(p1.amount) AS new_customer_total,
       (SELECT number_of_customers
          FROM customers_by_month_table c
        WHERE c.year_month = p1.year_month) AS number_of_customers,
       (SELECT total
          FROM customers_by_month_table c
         WHERE c.year_month = p1.year_month) AS total
  FROM payment_with_year_month_table p1
 WHERE p1.customerNumber NOT IN (SELECT customerNumber
                                   FROM payment_with_year_month_table p2
                                  WHERE p2.year_month &lt; p1.year_month)
 GROUP BY p1.year_month)
 
 
SELECT year_month, 
       ROUND(number_of_new_customers*100/number_of_customers,1) AS number_of_new_customers_props,
       ROUND(new_customer_total*100/total,1) AS new_customers_total_props
  FROM new_customers_by_month_table;</sql><sql name="SQL 3">--1.Write a query that returns each genre, with the number of tracks sold in the USA
--in absolute numbers
--in percentages.

WITH usasold AS(SELECT billing_country, g.name, count(g.name) as USA_sold
from genre g
join track t
on g.genre_id = t.genre_id
join invoice_line il
on t.track_id = il.track_id
join invoice i
on il.invoice_id = i.invoice_id
where billing_country = 'USA'
group by 1,2
order by 3 desc)
--Have of the sales in the USA are made up by the Rock genre(53%)
-- SELECT 
-- 	name, 
-- 	USA_sold, 
-- 	round(USA_sold/cast(sum(USA_sold) over()as real)*100,2) AS pct_sold
-- FROM usasold

SELECT
	name,
	USA_sold,
	round(USA_sold  * 1.0/(SELECT SUM(USA_sold) FROM usasold)*100,2) as pct_sold
FROM usasold;

--2.Write a query that finds the total dollar amount of sales assigned to each sales support agent within the company--
--Concatenated first and last name.
--Extracted hire date time leaving out time.
--Grouped number of customers and total sales by employee.address.
--Order total sales in descending order.
SELECT e.first_name||' '||e.last_name AS full_name,substr(e.hire_date,1,10) AS hire_date,
count(c.customer_id) AS no_customers, sum(i.total) As amount_of_sales
from employee e
JOIN customer c
ON e.employee_id = c.support_rep_id
JOIN invoice i
ON i.customer_id = c.customer_id
group by 1,2
order by sum(i.total) DESC

</sql><sql name="SQL 4">--3.Analyze the sales data for customers from each different country
with total_country as(SELECT  c.country, 
sum(total) as totalsum
FROM invoice i
JOIN customer c
ON i.customer_id = c.customer_id
group by 1
order by 2 desc),

only1 as(SELECT country, count(*), case when count(*) &lt;&gt; 1 then country else 'other' end
FROM customer 
group by 1
order by 2 desc);


SELECT
       CASE
           WHEN (
                 SELECT count(*)
                 FROM customer
                 where country = c.country
                ) = 1 THEN &quot;Other&quot;
           ELSE c.country
       END AS country,
       c.customer_id,
       il.*
     FROM invoice_line il
     INNER JOIN invoice i ON i.invoice_id = il.invoice_id
     INNER JOIN customer c ON c.customer_id = i.customer_id


</sql><sql name="SQL 5">SELECT
       CASE
           WHEN (
                 SELECT count(*)
                 FROM customer
                 where country = c.country
                ) = 1 THEN &quot;Other&quot;
           ELSE c.country
       END AS country,
       c.customer_id,
       il.*
     FROM invoice_line il
     INNER JOIN invoice i ON i.invoice_id = il.invoice_id
     INNER JOIN customer c ON c.customer_id = i.customer_id</sql><current_tab id="0"/></tab_sql></sqlb_project>
